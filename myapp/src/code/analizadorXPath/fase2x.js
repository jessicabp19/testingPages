/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var fase2x = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[1,9],$V3=[1,10],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,11],$V8=[1,12],$V9=[1,19],$Va=[1,20],$Vb=[1,21],$Vc=[1,22],$Vd=[1,23],$Ve=[1,24],$Vf=[1,25],$Vg=[1,26],$Vh=[1,27],$Vi=[1,28],$Vj=[1,29],$Vk=[1,30],$Vl=[1,31],$Vm=[2,5,15,16,17,22,23,24,25,26,53,54,55,56,57,58,59,60,61,62,63,64,65],$Vn=[1,38],$Vo=[1,39],$Vp=[2,5,22,23,24,25,26,53,54,55,56,57,58,59,60,61,62,63,64,65],$Vq=[2,15],$Vr=[2,15,16,17,18,21,22,23,24,25,26,53,54,55,56,57,58,59,60,61,62,63,64,65],$Vs=[2,5,15,16,17,19,22,23,24,25,26,44,53,54,55,56,57,58,59,60,61,62,63,64,65],$Vt=[2,9],$Vu=[1,46],$Vv=[1,47],$Vw=[1,77],$Vx=[1,68],$Vy=[1,69],$Vz=[1,72],$VA=[1,73],$VB=[1,70],$VC=[1,71],$VD=[1,74],$VE=[1,75],$VF=[2,18,19,21,22,23,44,46,47,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65],$VG=[2,21],$VH=[2,20],$VI=[2,22],$VJ=[2,24],$VK=[1,95],$VL=[1,106],$VM=[1,97],$VN=[1,98],$VO=[1,99],$VP=[1,100],$VQ=[1,101],$VR=[1,102],$VS=[1,103],$VT=[1,104],$VU=[1,105],$VV=[1,107],$VW=[1,108],$VX=[1,109],$VY=[1,96],$VZ=[20,24,32,33,34,35,36,37,38,39,40,41,42,43,45],$V_=[2,5,15,16,17,20,22,23,24,25,26,32,33,34,35,36,37,38,39,40,41,42,43,45,53,54,55,56,57,58,59,60,61,62,63,64,65],$V$=[2,5,15,16,17,19,20,22,23,24,25,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,53,54,55,56,57,58,59,60,61,62,63,64,65],$V01=[2,19];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"instrucciones":4,"EOF":5,"primero":6,"aux4":7,"segundo":8,"puntos":9,"Barritas":10,"sinBarritas":11,"aux3":12,"specs":13,"Axes":14,"//":15,"/":16,"|":17,"text":18,"(":19,")":20,"node":21,"@":22,"ID":23,"*":24,".":25,"..":26,"aux1":27,"expr":28,"aux2":29,"signo":30,"ident":31,"+":32,"-":33,"mod":34,"and":35,"or":36,">=":37,">":38,"<":39,"<=":40,"div":41,"=":42,"!=":43,"[":44,"]":45,"position":46,"last":47,"NUMBER":48,"cadena":49,"nombre":50,"::":51,"predicado":52,"ancestor":53,"ancestor-or-self":54,"attribute":55,"child":56,"descendant":57,"descendant-or-self":58,"following":59,"following-sibling":60,"namespace":61,"parent":62,"preceding":63,"preceding-sibling":64,"self":65,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"//",16:"/",17:"|",18:"text",19:"(",20:")",21:"node",22:"@",23:"ID",24:"*",25:".",26:"..",32:"+",33:"-",34:"mod",35:"and",36:"or",37:">=",38:">",39:"<",40:"<=",41:"div",42:"=",43:"!=",44:"[",45:"]",46:"position",47:"last",48:"NUMBER",49:"cadena",51:"::",53:"ancestor",54:"ancestor-or-self",55:"attribute",56:"child",57:"descendant",58:"descendant-or-self",59:"following",60:"following-sibling",61:"namespace",62:"parent",63:"preceding",64:"preceding-sibling",65:"self"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,2],[11,2],[11,1],[11,2],[11,3],[11,2],[10,2],[10,2],[10,0],[7,1],[7,1],[7,1],[8,3],[8,2],[8,2],[8,2],[8,3],[8,2],[8,3],[8,2],[8,3],[8,3],[12,2],[12,2],[12,1],[12,1],[9,1],[9,1],[13,3],[28,3],[28,3],[28,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[27,1],[27,1],[29,1],[29,1],[31,3],[31,3],[31,3],[31,3],[31,2],[31,2],[31,1],[31,1],[31,1],[31,1],[31,1],[14,3],[14,4],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[52,1],[52,1],[52,3],[52,3],[52,3],[52,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// cuado se haya reconocido la entrada completa retornamos el AST y todo lo demás
        return listaInstrucciones;
        console.log('XPATH completo! :D');
	
break;
case 2:

                                    
                                
break;
case 3:

                                    this.$ = {};
                                
break;
case 4:

                                this.$ = {};                                
                                                                 
                            
break;
case 5: case 8: case 10:

                                this.$ = {};
                                  
                            
break;
case 6: case 11: case 12: case 13: case 14: case 15: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26:

                                this.$ = {};
                            
break;
case 7:

                this.$ = $$[$0-1];
                this._$.first_column = _$[$0-1].first_column;
                this._$.first_line = _$[$0-1].first_line;                
                if($$[$0-1] != ''){
                
                console.log('Sintáctico ->', $$[$0-1], _$[$0-1].first_column,",",_$[$0-1].first_line);
                }
                
            
break;
case 9:

                                this.$ = $$[$0];  
                                listaInstrucciones.push(new Instruccion('id', this.$));
                                  
                            
break;
case 16:

                                this.$ = $$[$0] ;   
                                listaInstrucciones.push(new Instruccion('//', this.$));
                            
break;
case 17:

                                this.$ = $$[$0] ;  
                                listaInstrucciones.push(new Instruccion('/', this.$));
                            
break;
case 18:
                                
                                this.$ = $$[$0];  
                                listaInstrucciones.push(new Instruccion('|', this.$));
                            
break;
case 27:

                                this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
                                listaInstrucciones.push(new Instruccion('text', this.$));
                            
break;
case 28:

                                this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
                                listaInstrucciones.push(new Instruccion('node', this.$)); 
                            
break;
case 29:

                                this.$ = $$[$0-1] + $$[$0];   
                                listaInstrucciones.push(new Instruccion('atribute', this.$));
                            
break;
case 30:

                                this.$ = $$[$0-1] + $$[$0];  
                                listaInstrucciones.push(new Instruccion('all_atributes', this.$));
                            
break;
case 31: case 62:
                                
                            this.$ = $$[$0];  
                            listaInstrucciones.push(new Instruccion('id', this.$));
                        
break;
case 32: case 82:

                            this.$ = $$[$0];
                            listaInstrucciones.push(new Instruccion('all', this.$));   
                             
                        
break;
case 33:

                this.$ = $$[$0];
                listaInstrucciones.push(new Instruccion('.', this.$));
            
break;
case 34:

                this.$ = $$[$0];
                listaInstrucciones.push(new Instruccion('..', this.$));
            
break;
case 35:

                        this.$ = {};
                    
break;
case 36:

                            this.$ = {};
                             
                        
break;
case 37: case 38: case 65:

                            this.$ = {};
                        
break;
case 39:

                this.$ = $$[$0];
                listaInstrucciones.push(new Instruccion('+', this.$));
            
break;
case 40:

                this.$ = $$[$0];
                listaInstrucciones.push(new Instruccion('-', this.$));
            
break;
case 41:

                this.$ = $$[$0];
                listaInstrucciones.push(new Instruccion('mod', this.$));
            
break;
case 42:

                this.$ = $$[$0];
                listaInstrucciones.push(new Instruccion('and', this.$));
            
break;
case 43:

                this.$ = $$[$0];
                listaInstrucciones.push(new Instruccion('or', this.$));
            
break;
case 44:

                this.$ = $$[$0];
                listaInstrucciones.push(new Instruccion('>=', this.$));
            
break;
case 45:

                this.$ = $$[$0];
                listaInstrucciones.push(new Instruccion('>', this.$));
            
break;
case 46:

                this.$ = $$[$0];
                listaInstrucciones.push(new Instruccion('<', this.$));
            
break;
case 47:

                this.$ = $$[$0];
                listaInstrucciones.push(new Instruccion('<=', this.$));
            
break;
case 48:

                this.$ = $$[$0];
                listaInstrucciones.push(new Instruccion('*', this.$));
            
break;
case 49:

                this.$ = $$[$0];
                listaInstrucciones.push(new Instruccion('div', this.$));
            
break;
case 50:

                this.$ = $$[$0];
                listaInstrucciones.push(new Instruccion('=', this.$));
            
break;
case 51:

                this.$ = $$[$0];
                listaInstrucciones.push(new Instruccion('!=', this.$));
            
break;
case 52:

                this.$ = $$[$0];
                listaInstrucciones.push(new Instruccion('(', this.$));
            
break;
case 53:

                this.$ = $$[$0];
                listaInstrucciones.push(new Instruccion('[', this.$));
            
break;
case 54:

                this.$ = $$[$0];
                listaInstrucciones.push(new Instruccion(')', this.$));
            
break;
case 55:

                this.$ = $$[$0];
                listaInstrucciones.push(new Instruccion(']', this.$));
            
break;
case 56:
                                
                            this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
                            listaInstrucciones.push(new Instruccion('text', this.$));
                             
                        
break;
case 57:
   
                            this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
                            listaInstrucciones.push(new Instruccion('node', this.$)); 
                             
                        
break;
case 58:
                                
                            this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
                            listaInstrucciones.push(new Instruccion('position', this.$));
                             
                        
break;
case 59:
                                
                            this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
                            listaInstrucciones.push(new Instruccion('last', this.$));
                            
                        
break;
case 60:
                                
                           this.$ = $$[$0-1] + $$[$0];   
                            listaInstrucciones.push(new Instruccion('atribute', this.$));
                              
                        
break;
case 61:
                                
                            this.$ = $$[$0-1] + $$[$0];  
                            listaInstrucciones.push(new Instruccion('all_atributes', this.$));
                              
                        
break;
case 63:
                                
                            this.$ = $$[$0];  
                            listaInstrucciones.push(new Instruccion('number', this.$));
                              
                        
break;
case 64:
                                
                            this.$ = $$[$0]; 
                            listaInstrucciones.push(new Instruccion('cadena', this.$));
                        
break;
case 66:

                this.$ = $$[$0];
                this._$.first_column = _$[$0].first_column;
                this._$.first_line = _$[$0].first_line;                
                if($$[$0] != ''){
                
                console.log('Sintáctico ->', $$[$0], _$[$0].first_column,",",_$[$0].first_line);
                }
                
            
break;
case 67: case 68:

                                        this.$ = {};
                                          
                                    
break;
case 69:
                                
                                this.$ = $$[$0];  
                                listaInstrucciones.push(new Instruccion('ancestor', this.$)); 
                                listaInstrucciones.push(new Instruccion('axes1', '::')); 
                            
break;
case 70:
                                
                                this.$ = $$[$0]; 
                                listaInstrucciones.push(new Instruccion('ancestor-or-self', this.$));
                                listaInstrucciones.push(new Instruccion('axes1', '::'));   
                            
break;
case 71:
                                
                                this.$ = $$[$0]; 
                                listaInstrucciones.push(new Instruccion('attribute', this.$)); 
                                listaInstrucciones.push(new Instruccion('axes1', '::')); 
                            
break;
case 72:
                                
                                this.$ = $$[$0];  
                                listaInstrucciones.push(new Instruccion('child', this.$)); 
                                listaInstrucciones.push(new Instruccion('axes1', '::')); 
                            
break;
case 73:
                                
                                this.$ = $$[$0]; 
                                listaInstrucciones.push(new Instruccion('descendant', this.$)); 
                                listaInstrucciones.push(new Instruccion('axes1', '::'));  
                            
break;
case 74:
                                
                                this.$ = $$[$0];  
                                listaInstrucciones.push(new Instruccion('descendant-or-self', this.$)); 
                                listaInstrucciones.push(new Instruccion('axes1', '::'));     
                            
break;
case 75:
                                
                                this.$ = $$[$0]; 
                                listaInstrucciones.push(new Instruccion('following', this.$));    
                                listaInstrucciones.push(new Instruccion('axes1', '::')); 
                            
break;
case 76:
                                
                                this.$ = $$[$0]; 
                                listaInstrucciones.push(new Instruccion('following-sibling', this.$));  
                                listaInstrucciones.push(new Instruccion('axes1', '::'));    
                            
break;
case 77:
                                
                                this.$ = $$[$0];  
                                listaInstrucciones.push(new Instruccion('namespace', this.$)); 
                                listaInstrucciones.push(new Instruccion('axes1', '::')); 
                            
break;
case 78:
                                
                                this.$ = $$[$0]; 
                                listaInstrucciones.push(new Instruccion('parent', this.$)); 
                                listaInstrucciones.push(new Instruccion('axes1', '::')); 
                            
break;
case 79:
                                
                                this.$ = $$[$0];  
                                listaInstrucciones.push(new Instruccion('preceding', this.$));
                                listaInstrucciones.push(new Instruccion('axes1', '::')); 
                            
break;
case 80:
                                
                                this.$ = $$[$0]; 
                                listaInstrucciones.push(new Instruccion('preceding-sibling', this.$)); 
                                listaInstrucciones.push(new Instruccion('axes1', '::')); 
                                  
                            
break;
case 81:

                                this.$ = $$[$0]; 
                                listaInstrucciones.push(new Instruccion('self', this.$));
                                listaInstrucciones.push(new Instruccion('axes1', '::'));                                
                            
break;
case 83:

                            this.$ = $$[$0];
                            listaInstrucciones.push(new Instruccion('id', this.$));   
                             
                        
break;
case 84:

                            this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
                            listaInstrucciones.push(new Instruccion('text', this.$));   
                             
                        
break;
case 85:

                            this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
                            listaInstrucciones.push(new Instruccion('node', this.$));                                
                             
                        
break;
case 86:

                            this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
                            listaInstrucciones.push(new Instruccion('position', this.$));                            
                             
                        
break;
case 87:

                            this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
                            listaInstrucciones.push(new Instruccion('last', this.$));                                                        
                             
                        
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,11:6,12:13,14:14,15:$V1,16:$V2,17:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,50:18,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl},{1:[3]},{2:$V0,5:[1,32],6:33,7:4,9:5,11:6,12:13,14:14,15:$V1,16:$V2,17:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,50:18,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl},o($Vm,[2,3]),{8:34,9:37,12:35,14:36,18:$Vn,21:$Vo,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,50:18,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl},o($Vp,$Vq,{10:40,7:41,15:$V1,16:$V2,17:$V3}),o($Vm,[2,6]),o($Vp,$Vq,{7:41,10:42,15:$V1,16:$V2,17:$V3}),o($Vr,[2,16]),o($Vr,[2,17]),o($Vr,[2,18]),o($Vs,[2,33]),o($Vs,[2,34]),o($Vp,$Vt,{7:41,10:43,13:44,27:45,15:$V1,16:$V2,17:$V3,19:$Vu,44:$Vv}),o($Vp,$Vq,{7:41,10:48,15:$V1,16:$V2,17:$V3}),{23:[1,49],24:[1,50]},o($Vs,[2,31]),o($Vs,[2,32]),{51:[1,51]},{51:[2,69]},{51:[2,70]},{51:[2,71]},{51:[2,72]},{51:[2,73]},{51:[2,74]},{51:[2,75]},{51:[2,76]},{51:[2,77]},{51:[2,78]},{51:[2,79]},{51:[2,80]},{51:[2,81]},{1:[2,1]},o($Vm,[2,2]),o($Vm,[2,4]),o($Vp,$Vq,{7:41,27:45,13:52,10:53,15:$V1,16:$V2,17:$V3,19:$Vu,44:$Vv}),o($Vp,$Vq,{7:41,10:54,15:$V1,16:$V2,17:$V3}),o($Vp,$Vq,{7:41,27:45,13:55,10:56,15:$V1,16:$V2,17:$V3,19:$Vu,44:$Vv}),{19:[1,57]},{19:[1,58]},o($Vm,[2,5]),{2:$V0,6:60,7:4,8:59,9:63,11:6,12:61,14:62,15:$V1,16:$V2,17:$V3,18:$Vn,21:$Vo,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,50:18,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl},o($Vm,[2,7]),o($Vm,[2,8]),o($Vp,[2,10],{7:41,10:64,15:$V1,16:$V2,17:$V3}),{2:$Vw,14:76,18:$Vx,19:$Vu,21:$Vy,22:$Vz,23:$VA,27:66,28:65,31:67,44:$Vv,46:$VB,47:$VC,48:$VD,49:$VE,50:18,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl},o($VF,[2,52]),o($VF,[2,53]),o($Vm,[2,12]),o($Vs,[2,29]),o($Vs,[2,30]),{18:[1,81],21:[1,82],23:[1,80],24:[1,79],46:[1,83],47:[1,84],52:78},o($Vp,$VG,{7:41,10:85,15:$V1,16:$V2,17:$V3}),o($Vm,$VH),o($Vm,$VI),o($Vp,$Vq,{7:41,10:86,15:$V1,16:$V2,17:$V3}),o($Vm,$VJ),{20:[1,87]},{20:[1,88]},o($Vm,[2,13]),o($Vm,[2,14]),o($Vp,$Vt,{7:41,27:45,13:89,10:90,15:$V1,16:$V2,17:$V3,19:$Vu,44:$Vv}),o($Vp,$Vq,{7:41,10:91,15:$V1,16:$V2,17:$V3}),o($Vp,$Vq,{7:41,27:45,13:55,10:92,15:$V1,16:$V2,17:$V3,19:$Vu,44:$Vv}),o($Vm,[2,11]),{20:$VK,24:$VL,29:93,30:94,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,39:$VT,40:$VU,41:$VV,42:$VW,43:$VX,45:$VY},{2:$Vw,14:76,18:$Vx,19:$Vu,21:$Vy,22:$Vz,23:$VA,27:66,28:110,31:67,44:$Vv,46:$VB,47:$VC,48:$VD,49:$VE,50:18,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl},o($VZ,[2,38]),{19:[1,111]},{19:[1,112]},{19:[1,113]},{19:[1,114]},{23:[1,115],24:[1,116]},o($VZ,[2,62]),o($VZ,[2,63]),o($VZ,[2,64]),o($VZ,[2,65]),o($VZ,[2,66]),o($V_,[2,67],{27:45,13:117,19:$Vu,44:$Vv}),o($V$,[2,82]),o($V$,[2,83]),{19:[1,118]},{19:[1,119]},{19:[1,120]},{19:[1,121]},o($Vm,$V01),o($Vm,[2,23]),o($Vm,[2,27]),o($Vm,[2,28]),o($Vp,$VG,{7:41,10:122,15:$V1,16:$V2,17:$V3}),o($Vm,$VH),o($Vm,$VI),o($Vm,$VJ),o($V_,[2,35]),{2:$Vw,14:76,18:$Vx,19:$Vu,21:$Vy,22:$Vz,23:$VA,27:66,28:123,31:67,44:$Vv,46:$VB,47:$VC,48:$VD,49:$VE,50:18,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl},o($V_,[2,54]),o($V_,[2,55]),o($VF,[2,39]),o($VF,[2,40]),o($VF,[2,41]),o($VF,[2,42]),o($VF,[2,43]),o($VF,[2,44]),o($VF,[2,45]),o($VF,[2,46]),o($VF,[2,47]),o($VF,[2,48]),o($VF,[2,49]),o($VF,[2,50]),o($VF,[2,51]),{20:$VK,24:$VL,29:124,30:94,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,39:$VT,40:$VU,41:$VV,42:$VW,43:$VX,45:$VY},{20:[1,125]},{20:[1,126]},{20:[1,127]},{20:[1,128]},o($VZ,[2,60]),o($VZ,[2,61]),o($V_,[2,68]),{20:[1,129]},{20:[1,130]},{20:[1,131]},{20:[1,132]},o($Vm,$V01),o([20,45],[2,37],{30:94,24:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,39:$VT,40:$VU,41:$VV,42:$VW,43:$VX}),o($VZ,[2,36]),o($VZ,[2,56]),o($VZ,[2,57]),o($VZ,[2,58]),o($VZ,[2,59]),o($V$,[2,84]),o($V$,[2,85]),o($V$,[2,86]),o($V$,[2,87])],
defaultActions: {19:[2,69],20:[2,70],21:[2,71],22:[2,72],23:[2,73],24:[2,74],25:[2,75],26:[2,76],27:[2,77],28:[2,78],29:[2,79],30:[2,80],31:[2,81],32:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    /*Acá importo mis cosas errores, tokens para la tabla de símbolos y eso*/
    const { Instruccion } = require('./codigo/lista')
    
    const listaInstrucciones = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:  
                        return 48;
break;
case 2:  
                        return 15;
break;
case 3:  
                        return 16;
break;
case 4:  
                        return 49;
break;
case 5:  
                        return 49;
break;
case 6:  
                        return 44;
break;
case 7:  
                        return 45;
break;
case 8:  
                        return 19;
break;
case 9:  
                        return 20;
break;
case 10:  
                        return 17;
break;
case 11:  
                        return 32;
break;
case 12:  
                        return 33;
break;
case 13:  
                        return 24;
break;
case 14:  
                        return 41;
break;
case 15:  
                        return 42;
break;
case 16:  
                        return 43;
break;
case 17:  
                        return 40;
break;
case 18:  
                        return 39;
break;
case 19:  
                        return 37;
break;
case 20:  
                        return 38;
break;
case 21:  
                        return 36;
break;
case 22:  
                        return 35;
break;
case 23:  
                        return 34;
break;
case 24:  
                        return 22;
break;
case 25:  
                        return '\'';
break;
case 26:  
                        return '\"';
break;
case 27:  
                        return 54;
break;
case 28:  
                        return 53;
break;
case 29:  
                        return 55;
break;
case 30:  
                        return 56;
break;
case 31:  
                        return 58;
break;
case 32:  
                        return 57;
break;
case 33:  
                        return 'following-or-sibling';
break;
case 34:  
                        return 59;
break;
case 35:  
                        return 61;
break;
case 36:  
                        return 62;
break;
case 37:  
                        return 64;
break;
case 38:  
                        return 63;
break;
case 39:  
                        return 65;
break;
case 40:  
                        return 18;
break;
case 41:  
                        return 21;
break;
case 42:  
                        return 46;
break;
case 43:  
                        return 47;
break;
case 44:  
                        return 51;
break;
case 45:  
                        return 26;
break;
case 46:  
                        return 25;
break;
case 47:  
                        return 23;
break;
case 48:  
                        return 5;
break;
case 49:             
                
                console.log(`Error Léxico: ${yy_.yytext} en la linea ${yy_.yylloc.first_line} y en la columna ${yy_.yylloc.first_column}`);
            
break;
}
},
rules: [/^(?:\s+)/i,/^(?:([0-9]+(\.[0-9]+)?\b))/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:"([^\\\"\n]|\\.)*")/i,/^(?:'([^\\\"\n]|\\.)*')/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:div\b)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:mod\b)/i,/^(?:@)/i,/^(?:')/i,/^(?:")/i,/^(?:ancestor-or-self\b)/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:child\b)/i,/^(?:descendant-or-self\b)/i,/^(?:descendant\b)/i,/^(?:following-sibling\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:preceding-sibling\b)/i,/^(?:preceding\b)/i,/^(?:self\b)/i,/^(?:text\b)/i,/^(?:node\b)/i,/^(?:position\b)/i,/^(?:last\b)/i,/^(?:::)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = fase2x;
exports.Parser = fase2x.Parser;
exports.parse = function () { return fase2x.parse.apply(fase2x, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}