/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gram_xquery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[66,70,82,85],$V1=[2,9],$V2=[1,10],$V3=[1,8],$V4=[1,9],$V5=[5,15,66,70,82,85,91,100],$V6=[5,15,66,70,82,85,91,100,108],$V7=[70,82,85],$V8=[2,12],$V9=[1,18],$Va=[1,19],$Vb=[82,85],$Vc=[2,88],$Vd=[1,23],$Ve=[1,24],$Vf=[2,93],$Vg=[1,32],$Vh=[1,33],$Vi=[1,43],$Vj=[1,44],$Vk=[2,112],$Vl=[1,56],$Vm=[1,51],$Vn=[1,54],$Vo=[1,57],$Vp=[2,132],$Vq=[1,55],$Vr=[1,66],$Vs=[1,60],$Vt=[1,90],$Vu=[1,77],$Vv=[1,73],$Vw=[1,63],$Vx=[1,64],$Vy=[1,67],$Vz=[1,68],$VA=[1,69],$VB=[1,70],$VC=[1,71],$VD=[1,72],$VE=[1,74],$VF=[1,75],$VG=[1,76],$VH=[1,78],$VI=[1,79],$VJ=[1,80],$VK=[1,81],$VL=[1,82],$VM=[1,83],$VN=[1,84],$VO=[1,85],$VP=[1,86],$VQ=[1,87],$VR=[1,88],$VS=[1,89],$VT=[1,91],$VU=[1,92],$VV=[1,93],$VW=[1,94],$VX=[1,95],$VY=[1,96],$VZ=[1,97],$V_=[1,98],$V$=[1,99],$V01=[1,100],$V11=[1,101],$V21=[1,102],$V31=[1,103],$V41=[17,73,82,85],$V51=[2,95],$V61=[1,112],$V71=[1,120],$V81=[1,118],$V91=[1,119],$Va1=[1,121],$Vb1=[1,122],$Vc1=[5,15,17,18,21,23,24,25,33,39,46,47,48,49,66,70,82,85,90,91,100,108],$Vd1=[1,128],$Ve1=[1,124],$Vf1=[1,130],$Vg1=[1,126],$Vh1=[1,132],$Vi1=[1,134],$Vj1=[1,136],$Vk1=[1,125],$Vl1=[1,127],$Vm1=[1,129],$Vn1=[1,131],$Vo1=[1,133],$Vp1=[1,135],$Vq1=[5,15,17,18,21,23,24,25,33,39,42,43,44,45,46,47,48,49,50,51,66,70,73,75,76,77,78,79,80,82,85,90,91,100,108,121],$Vr1=[5,15,17,18,21,23,24,25,28,33,39,42,43,44,45,46,47,48,49,50,51,66,70,73,75,76,77,78,79,80,82,85,90,91,100,108,121],$Vs1=[17,21,66,70,82,85],$Vt1=[1,145],$Vu1=[1,152],$Vv1=[1,157],$Vw1=[1,153],$Vx1=[1,142],$Vy1=[1,143],$Vz1=[1,146],$VA1=[1,147],$VB1=[1,148],$VC1=[1,149],$VD1=[1,150],$VE1=[1,151],$VF1=[1,154],$VG1=[1,155],$VH1=[1,156],$VI1=[1,158],$VJ1=[1,159],$VK1=[1,160],$VL1=[1,161],$VM1=[1,162],$VN1=[1,163],$VO1=[1,164],$VP1=[1,165],$VQ1=[1,166],$VR1=[1,167],$VS1=[1,168],$VT1=[1,169],$VU1=[5,15,17,18,21,23,24,25,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,70,82,85,90,91,100,108],$VV1=[17,21,85],$VW1=[2,115],$VX1=[1,188],$VY1=[1,218],$VZ1=[1,219],$V_1=[2,136],$V$1=[1,231],$V02=[1,233],$V12=[1,235],$V22=[1,237],$V32=[1,239],$V42=[1,240],$V52=[17,28,42,43,44,45,50,73,75,76,77,78,79,80,82,85],$V62=[5,15,17,18,21,23,24,25,39,46,47,66,70,82,85,90,91,100,108],$V72=[5,15,17,18,21,23,24,25,33,39,46,47,48,66,70,82,85,90,91,100,108],$V82=[5,15,17,18,21,23,24,25,33,39,42,43,44,45,46,47,48,49,50,51,66,70,73,82,85,90,91,100,108,121],$V92=[17,28,42,43,44,45,50,73,82,85],$Va2=[1,277],$Vb2=[1,275],$Vc2=[1,276],$Vd2=[1,281],$Ve2=[5,15,66,70,82,85,90,91,100,108],$Vf2=[1,289],$Vg2=[1,291],$Vh2=[1,290],$Vi2=[1,292],$Vj2=[1,293],$Vk2=[1,294],$Vl2=[1,295],$Vm2=[1,296],$Vn2=[1,297],$Vo2=[1,298];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"BEGIN":3,"INSTRUCCIONES":4,"EOF":5,"XQUERY":6,"FLWOR":7,"CALL":8,"FUNCTION":9,"FOR":10,"LET":11,"WHERE":12,"ORDER":13,"RETURN":14,"for":15,"DEFINITION":16,"dollasign":17,"identificador":18,"in":19,"SOURCE":20,"coma":21,"doc":22,"p_abre":23,"StringLiteral":24,"p_cierra":25,"PATH":26,"RANK":27,"axis":28,"d_axis":29,"AXISNAME":30,"punto":31,"ppunto":32,"por":33,"at":34,"text":35,"node":36,"c_abre":37,"c_cierra":38,"numero":39,"last":40,"position":41,"mayorque":42,"menorque":43,"mayorigual":44,"menorigual":45,"mas":46,"menos":47,"div":48,"mod":49,"igual":50,"diferente":51,"ancestor":52,"cpuntos":53,"ancestororself":54,"attribute":55,"child":56,"descendant":57,"descendantorself":58,"following":59,"followingsibling":60,"namespace":61,"parent":62,"preceding":63,"precedingsibling":64,"self":65,"let":66,"DEF_LET":67,"dpuntos":68,"EXPRESION":69,"where":70,"DEF_WHERE":71,"WHERE_PATH":72,"land":73,"EXP_WHERE":74,"lt":75,"le":76,"gt":77,"ge":78,"eq":79,"ne":80,"F":81,"order":82,"CONT_ORDER":83,"ORDER_PATH":84,"return":85,"CONDITION":86,"rif":87,"rthen":88,"IF_RES":89,"relse":90,"local":91,"VARIABLES":92,"CALL_PRIM":93,"substring":94,"up_case":95,"low_case":96,"string":97,"number":98,"to":99,"dec":100,"fun":101,"VAR_FUNC":102,"as":103,"PREFIX":104,"TYPE":105,"quest":106,"l_abre":107,"l_cierra":108,"pyc":109,"xs":110,"fn":111,"date":112,"integer":113,"int":114,"long":115,"short":116,"boolean":117,"double":118,"float":119,"T":120,"lor":121,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"for",17:"dollasign",18:"identificador",19:"in",21:"coma",22:"doc",23:"p_abre",24:"StringLiteral",25:"p_cierra",28:"axis",29:"d_axis",31:"punto",32:"ppunto",33:"por",34:"at",35:"text",36:"node",37:"c_abre",38:"c_cierra",39:"numero",40:"last",41:"position",42:"mayorque",43:"menorque",44:"mayorigual",45:"menorigual",46:"mas",47:"menos",48:"div",49:"mod",50:"igual",51:"diferente",52:"ancestor",53:"cpuntos",54:"ancestororself",55:"attribute",56:"child",57:"descendant",58:"descendantorself",59:"following",60:"followingsibling",61:"namespace",62:"parent",63:"preceding",64:"precedingsibling",65:"self",66:"let",68:"dpuntos",70:"where",73:"land",75:"lt",76:"le",77:"gt",78:"ge",79:"eq",80:"ne",82:"order",85:"return",87:"rif",88:"rthen",90:"relse",91:"local",94:"substring",95:"up_case",96:"low_case",97:"string",98:"number",99:"to",100:"dec",101:"fun",103:"as",106:"quest",107:"l_abre",108:"l_cierra",109:"pyc",110:"xs",111:"fn",112:"date",113:"integer",114:"int",115:"long",116:"short",117:"boolean",118:"double",119:"float",121:"lor"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[7,5],[10,2],[10,0],[16,5],[16,6],[16,0],[20,5],[20,1],[20,1],[26,2],[26,2],[26,2],[26,2],[26,2],[26,2],[26,2],[26,2],[26,2],[26,2],[26,2],[26,2],[26,2],[26,2],[26,2],[26,2],[26,2],[26,2],[26,2],[26,2],[26,2],[26,2],[26,2],[26,2],[26,2],[26,2],[26,2],[26,2],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[30,2],[30,2],[30,2],[30,2],[30,2],[30,2],[30,2],[30,2],[30,2],[30,2],[30,2],[30,2],[30,2],[11,2],[11,0],[67,6],[67,7],[67,0],[12,2],[12,0],[71,4],[71,5],[71,0],[72,3],[72,0],[74,3],[74,3],[74,3],[74,3],[74,3],[74,3],[74,3],[74,3],[74,3],[74,3],[74,3],[74,1],[13,2],[13,0],[83,4],[83,5],[83,0],[84,3],[84,4],[84,0],[14,3],[14,2],[14,2],[86,8],[89,2],[89,1],[8,6],[93,4],[93,4],[93,4],[93,4],[93,4],[27,5],[27,5],[92,2],[92,3],[92,0],[9,17],[102,8],[102,9],[102,0],[104,1],[104,1],[104,1],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[69,3],[69,3],[69,3],[69,3],[69,3],[69,1],[120,3],[120,3],[120,3],[120,3],[120,3],[120,3],[120,3],[120,3],[120,3],[120,3],[120,3],[120,3],[120,3],[120,3],[120,1],[81,3],[81,1],[81,1],[81,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log(Arbol_AST); return this.$;
break;
case 3: case 4: case 84: case 118:
 this.$ = $$[$0] 
break;
case 7:
  //actualizacion: aqui hay que ejecutar las instrucciones del for

                                                //ejecutando for
                                                for(let inst_for of $$[$0-4]){
                                                    inst_for.ejecutar(Arbol_AST.getEntorno('flwor'));
                                                }
                                                
                                                //ejecutando let
                                                for(let inst_let of $$[$0-3]){
                                                    inst_let.ejecutar(Arbol_AST.getEntorno('flwor'));
                                                }

                                                //ejecutando where
                                                for(let inst_where of $$[$0-2]){
                                                    inst_where.ejecutar(Arbol_AST.getEntorno('flwor'));
                                                }

                                                //ejecutando return
                                                this.$ = $$[$0].ejecutar(Arbol_AST.getEntorno('flwor'));
                                                

                                            
break;
case 8:
   
                                  this.$ = $$[$0];
                                
break;
case 9: case 12: case 85: case 88: case 93:
 this.$ = [] 
break;
case 10:
 

                                                                let inst1 = [];
                                                                let inst_for1 = new For(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1], $$[$0-3]);
                                                                inst1.push(inst_for1);                                                                
                                                                this.$ = inst1.concat($$[$0]);


                                                            
break;
case 11:

                                                                let inst2 = [];
                                                                let inst_for2 = new For(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-1], $$[$0-3]);
                                                                inst2.push(inst_for2);
                                                                this.$ = inst2.concat($$[$0]);

                                                            
break;
case 13:
   
                                                    this.$ = $$[$0-1];
                                                    Arbol_AST.CrearEntorno('flwor', Entorno_Global);

                                                
break;
case 14:
 
                                                    this.$ = $$[$0];
                                                    Arbol_AST.CrearEntorno('flwor', Entorno_Global);
                                                
break;
case 15:
  
                                                    this.$ = $$[$0];
                                                    Arbol_AST.CrearEntorno('flwor', Entorno_Global);
                                                
break;
case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83:
 this.$ = $$[$0-1]+$$[$0]; 
break;
case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 107: case 137: case 138: case 139: case 140: case 141: case 142: case 143: case 144: case 145: case 146: case 147: case 148: case 149: case 155: case 170:
 this.$ = $$[$0]; 
break;
case 86:

                                                                Arbol_AST.CrearEntorno('flwor', Entorno_Global); 
                                                                let let1 = [];
                                                                let inst_let1 = new Let(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-1], $$[$0-4]);
                                                                let1.push(inst_let1);                                                                
                                                                this.$ = let1.concat($$[$0]);
                                                            
break;
case 87:

                                                                Arbol_AST.CrearEntorno('flwor', Entorno_Global); 
                                                                let let2 = [];
                                                                let inst_let2 = new Let(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-1], $$[$0-4]);
                                                                let2.push(inst_let2);                                                                
                                                                this.$ = let2.concat($$[$0]);
                                                            
break;
case 89:

                                this.$ = $$[$0];
                            
break;
case 91:

                                                                let where1 = [];
                                                                let inst_where1 = new Where(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], $$[$0-2]);
                                                                where1.push(inst_where1);                                                                
                                                                this.$ = where1.concat($$[$0]);
                                                            
break;
case 92:

                                                                let where2 = [];
                                                                let inst_where2 = new Where(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1], $$[$0-2]);
                                                                where2.push(inst_where2);                                                                
                                                                this.$ = where2.concat($$[$0]);
                                                            
break;
case 94:
 
                                            this.$ = [];
                                            this.$.push($$[$0-1]);
                                            this.$ = this.$.concat($$[$0]);
                                        
break;
case 95:
 this.$ = []; 
break;
case 96: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106:
 this.$ = $$[$0-2].getValorImplicito({})+$$[$0-1]+$$[$0].getValorImplicito({});
break;
case 108:


                        
break;
case 116:

                                        this.$ = new Return(_$[$0-2].first_line, _$[$0-2].first_column, '', '/'+$$[$0]);
                                    
break;
case 117:

                                        this.$ = new Return(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0].getValorImplicito({}),'');
                                    
break;
case 119:

                                                                            if($$[$0-5].getValorImplicito({})){
                                                                                this.$ = $$[$0-2];
                                                                            }
                                                                            else{
                                                                                this.$ = $$[$0];
                                                                            }
                                                                        
break;
case 120:

                                    this.$ = new Return(_$[$0-1].first_line, _$[$0-1].first_column, '', '/'+$$[$0]);
                                
break;
case 121:

                                    this.$ = new Return(_$[$0].first_line, _$[$0].first_column, $$[$0].getValorImplicito({}),'');
                                
break;
case 128: case 129:
 this.$ = [Number($$[$0-3]),Number($$[$0-1])] 
break;
case 150:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.SUMA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 151:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.RESTA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 152:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 153:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 154:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MODULO, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 156: case 157:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 158: case 159:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_IGUA_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 160: case 161:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 162: case 163:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_IGUA_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 164: case 165:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.IGUAL_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 166: case 167:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIFERENTE_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 168:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.AND, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 169:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.OR, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 171:
 this.$ = $$[$0-1]; 
break;
case 172:
 this.$ = new Primitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column); 
break;
case 173: case 174:
 this.$ = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
}
},
table: [o($V0,$V1,{3:1,4:2,6:3,7:4,8:5,9:6,10:7,15:$V2,91:$V3,100:$V4}),{1:[3]},o($V0,$V1,{7:4,8:5,9:6,10:7,6:12,5:[1,11],15:$V2,91:$V3,100:$V4}),o($V5,[2,3]),o($V6,[2,4]),o($V6,[2,5]),o($V6,[2,6]),o($V7,[2,85],{11:13,66:[1,14]}),{68:[1,15]},{101:[1,16]},o($V0,$V8,{16:17,17:$V9,21:$Va}),{1:[2,1]},o($V5,[2,2]),o($Vb,[2,90],{12:20,70:[1,21]}),o($V7,$Vc,{67:22,17:$Vd,21:$Ve}),{18:[1,25]},{18:[1,26]},o($V0,[2,8]),{18:[1,27]},{17:[1,28]},{13:29,82:[1,30],85:[2,109]},o($Vb,$Vf,{71:31,17:$Vg,73:$Vh}),o($V7,[2,84]),{18:[1,34]},{17:[1,35]},{23:[1,36]},{68:[1,37]},{19:[1,38]},{18:[1,39]},{14:40,85:[1,41]},{17:$Vi,21:$Vj,83:42,85:$Vk},o($Vb,[2,89]),{18:[1,45]},{17:[1,46]},{68:[1,47]},{18:[1,48]},{18:$Vl,21:$Vm,23:$Vn,24:$Vo,25:$Vp,39:$Vq,69:50,81:53,92:49,120:52},{18:[1,58]},{18:$Vr,20:59,22:$Vs,23:$Vt,24:$Vu,25:$Vv,26:61,27:62,28:$Vw,29:$Vx,30:65,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,61:$V$,62:$V01,63:$V11,64:$V21,65:$V31},{19:[1,104]},o($V6,[2,7]),{17:[1,105],18:$Vl,23:$Vn,24:$Vo,39:$Vq,69:106,81:53,86:107,87:[1,108],120:52},{85:[2,108]},{18:[1,109]},{17:[1,110]},o($V41,$V51,{72:111,28:$V61}),{18:[1,113]},{50:[1,114]},{68:[1,115]},{25:[1,116]},{18:$Vl,21:$Vm,23:$Vn,24:$Vo,25:$Vp,33:$V71,39:$Vq,46:$V81,47:$V91,48:$Va1,49:$Vb1,69:50,81:53,92:117,120:52},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,69:123,81:53,120:52},o($Vc1,[2,155],{42:$Vd1,43:$Ve1,44:$Vf1,45:$Vg1,50:$Vh1,51:$Vi1,73:$Vj1,75:$Vk1,76:$Vl1,77:$Vm1,78:$Vn1,79:$Vo1,80:$Vp1,121:[1,137]}),o($Vq1,[2,170]),{18:$Vl,23:$Vn,24:$Vo,39:$Vq,69:138,81:53,120:52},o($Vr1,[2,172]),o($Vr1,[2,173]),o($Vr1,[2,174]),{23:[1,139]},o($V0,$V8,{16:140,17:$V9,21:$Va}),{23:[1,141]},o($Vs1,[2,14],{30:144,18:$Vt1,23:$Vu1,24:$Vv1,25:$Vw1,28:$Vx1,29:$Vy1,31:$Vz1,32:$VA1,33:$VB1,34:$VC1,35:$VD1,36:$VE1,37:$VF1,38:$VG1,39:$VH1,40:$VI1,41:$VJ1,42:$VK1,43:$VL1,44:$VM1,45:$VN1,46:$VO1,47:$VP1,48:$VQ1,49:$VR1,50:$VS1,51:$VT1,52:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,61:$V$,62:$V01,63:$V11,64:$V21,65:$V31}),o($Vs1,[2,15]),o($VU1,[2,44]),o($VU1,[2,45]),o($VU1,[2,46]),o($VU1,[2,47]),o($VU1,[2,48]),o($VU1,[2,49]),o($VU1,[2,50]),o($VU1,[2,51]),o($VU1,[2,52]),o($VU1,[2,53]),o($VU1,[2,54]),o($VU1,[2,55]),o($VU1,[2,56]),o($VU1,[2,57]),o($VU1,[2,58]),o($VU1,[2,59]),o($VU1,[2,60]),o($VU1,[2,61]),o($VU1,[2,62]),o($VU1,[2,63]),o($VU1,[2,64]),o($VU1,[2,65]),o($VU1,[2,66]),o($VU1,[2,67]),o($VU1,[2,68]),o($VU1,[2,69]),o($VU1,[2,70]),{39:[1,170]},{53:[1,171]},{53:[1,172]},{53:[1,173]},{53:[1,174]},{53:[1,175]},{53:[1,176]},{53:[1,177]},{53:[1,178]},{53:[1,179]},{53:[1,180]},{53:[1,181]},{53:[1,182]},{53:[1,183]},{18:$Vr,20:184,22:$Vs,23:$Vt,24:$Vu,25:$Vv,26:61,27:62,28:$Vw,29:$Vx,30:65,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,61:$V$,62:$V01,63:$V11,64:$V21,65:$V31},{18:$Vr,24:$Vu,25:$Vv,26:185,28:$Vw,29:$Vx,30:65,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,61:$V$,62:$V01,63:$V11,64:$V21,65:$V31},o($V6,[2,117],{33:$V71,46:$V81,47:$V91,48:$Va1,49:$Vb1}),o($V6,[2,118]),{23:[1,186]},o($VV1,$VW1,{84:187,28:$VX1}),{18:[1,189]},o($Vb,$Vf,{71:190,17:$Vg,73:$Vh}),{18:$Vl,23:$Vn,24:$Vo,39:$Vq,74:191,81:192},o($V41,$V51,{72:193,28:$V61}),{18:$Vl,23:$Vn,24:$Vo,39:$Vq,69:194,81:53,120:52},{50:[1,195]},o($V6,[2,122]),{25:[2,130]},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,69:196,81:53,120:52},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,69:197,81:53,120:52},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,69:198,81:53,120:52},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,69:199,81:53,120:52},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,69:200,81:53,120:52},{18:$Vl,21:$Vm,23:$Vn,24:$Vo,25:$Vp,33:$V71,39:$Vq,46:$V81,47:$V91,48:$Va1,49:$Vb1,69:50,81:53,92:201,120:52},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,81:53,120:202},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,81:53,120:203},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,81:53,120:204},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,81:53,120:205},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,81:53,120:206},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,81:53,120:207},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,81:53,120:208},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,81:53,120:209},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,81:53,120:210},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,81:53,120:211},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,81:53,120:212},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,81:53,120:213},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,81:53,120:214},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,81:53,120:215},{25:[1,216],33:$V71,46:$V81,47:$V91,48:$Va1,49:$Vb1},{17:$VY1,21:$VZ1,25:$V_1,102:217},o($V0,[2,10]),{24:[1,220]},o($VU1,[2,16]),o($VU1,[2,17]),o($VU1,[2,18]),o($VU1,[2,19]),o($VU1,[2,20]),o($VU1,[2,21]),o($VU1,[2,22]),o($VU1,[2,23]),o($VU1,[2,24]),o($VU1,[2,25]),o($VU1,[2,26]),o($VU1,[2,27]),o($VU1,[2,28]),o($VU1,[2,29]),o($VU1,[2,30]),o($VU1,[2,31]),o($VU1,[2,32]),o($VU1,[2,33]),o($VU1,[2,34]),o($VU1,[2,35]),o($VU1,[2,36]),o($VU1,[2,37]),o($VU1,[2,38]),o($VU1,[2,39]),o($VU1,[2,40]),o($VU1,[2,41]),o($VU1,[2,42]),o($VU1,[2,43]),{21:[1,222],99:[1,221]},o($VU1,[2,71]),o($VU1,[2,72]),o($VU1,[2,73]),o($VU1,[2,74]),o($VU1,[2,75]),o($VU1,[2,76]),o($VU1,[2,77]),o($VU1,[2,78]),o($VU1,[2,79]),o($VU1,[2,80]),o($VU1,[2,81]),o($VU1,[2,82]),o($VU1,[2,83]),o($V0,$V8,{16:223,17:$V9,21:$Va}),o($V6,[2,116],{30:144,18:$Vt1,23:$Vu1,24:$Vv1,25:$Vw1,28:$Vx1,29:$Vy1,31:$Vz1,32:$VA1,33:$VB1,34:$VC1,35:$VD1,36:$VE1,37:$VF1,38:$VG1,39:$VH1,40:$VI1,41:$VJ1,42:$VK1,43:$VL1,44:$VM1,45:$VN1,46:$VO1,47:$VP1,48:$VQ1,49:$VR1,50:$VS1,51:$VT1,52:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,61:$V$,62:$V01,63:$V11,64:$V21,65:$V31}),{18:$Vl,23:$Vn,24:$Vo,39:$Vq,69:224,81:53,120:52},{17:$Vi,21:$Vj,83:225,85:$Vk},{18:[1,226],34:[1,227]},o($VV1,$VW1,{84:228,28:$VX1}),o($Vb,[2,91]),o($V41,$V51,{72:229,28:$V61,42:[1,234],43:[1,230],44:[1,236],45:[1,232],50:[1,238],75:$V$1,76:$V02,77:$V12,78:$V22,79:$V32,80:$V42}),o($V52,[2,107]),o($Vb,$Vf,{71:241,17:$Vg,73:$Vh}),o($V7,$Vc,{67:242,17:$Vd,21:$Ve,33:$V71,46:$V81,47:$V91,48:$Va1,49:$Vb1}),{18:$Vl,23:$Vn,24:$Vo,39:$Vq,69:243,81:53,120:52},o($V62,[2,150],{33:$V71,48:$Va1,49:$Vb1}),o($V62,[2,151],{33:$V71,48:$Va1,49:$Vb1}),o($V72,[2,152],{49:$Vb1}),o($V72,[2,153],{49:$Vb1}),o($Vc1,[2,154]),{25:[2,131]},o($V82,[2,156],{75:$Vk1,76:$Vl1,77:$Vm1,78:$Vn1,79:$Vo1,80:$Vp1}),o($Vq1,[2,157]),o($V82,[2,158],{75:$Vk1,76:$Vl1,77:$Vm1,78:$Vn1,79:$Vo1,80:$Vp1}),o($Vq1,[2,159]),o($V82,[2,160],{75:$Vk1,76:$Vl1,77:$Vm1,78:$Vn1,79:$Vo1,80:$Vp1}),o($Vq1,[2,161]),o($V82,[2,162],{75:$Vk1,76:$Vl1,77:$Vm1,78:$Vn1,79:$Vo1,80:$Vp1}),o($Vq1,[2,163]),o($V82,[2,164],{75:$Vk1,76:$Vl1,77:$Vm1,78:$Vn1,79:$Vo1,80:$Vp1}),o($Vq1,[2,165]),o($V82,[2,166],{75:$Vk1,76:$Vl1,77:$Vm1,78:$Vn1,79:$Vo1,80:$Vp1}),o($Vq1,[2,167]),o([5,15,17,18,21,23,24,25,33,39,46,47,48,49,66,70,73,82,85,90,91,100,108,121],[2,168],{42:$Vd1,43:$Ve1,44:$Vf1,45:$Vg1,50:$Vh1,51:$Vi1,75:$Vk1,76:$Vl1,77:$Vm1,78:$Vn1,79:$Vo1,80:$Vp1}),o([5,15,17,18,21,23,24,25,33,39,46,47,48,49,66,70,82,85,90,91,100,108,121],[2,169],{42:$Vd1,43:$Ve1,44:$Vf1,45:$Vg1,50:$Vh1,51:$Vi1,73:$Vj1,75:$Vk1,76:$Vl1,77:$Vm1,78:$Vn1,79:$Vo1,80:$Vp1}),o($Vr1,[2,171]),{25:[1,244]},{18:[1,245]},{17:[1,246]},{25:[1,247]},{39:[1,248]},{39:[1,249]},o($V0,[2,11]),{25:[1,250],33:$V71,46:$V81,47:$V91,48:$Va1,49:$Vb1},{85:[2,110]},o($VV1,$VW1,{84:251,28:$VX1}),{18:[1,252]},{17:$Vi,21:$Vj,83:253,85:$Vk},o($V41,[2,94]),{18:$Vl,23:$Vn,24:$Vo,39:$Vq,74:254,81:192},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,74:255,81:192},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,74:256,81:192},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,74:257,81:192},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,74:258,81:192},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,74:259,81:192},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,74:260,81:192},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,74:261,81:192},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,74:262,81:192},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,74:263,81:192},{18:$Vl,23:$Vn,24:$Vo,39:$Vq,74:264,81:192},o($Vb,[2,92]),o($V7,[2,86]),o($V7,$Vc,{67:265,17:$Vd,21:$Ve,33:$V71,46:$V81,47:$V91,48:$Va1,49:$Vb1}),{103:[1,266]},{103:[1,267]},{18:[1,268]},{18:$Vr,24:$Vu,25:$Vv,26:269,28:$Vw,29:$Vx,30:65,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,61:$V$,62:$V01,63:$V11,64:$V21,65:$V31},{25:[1,270]},{25:[1,271]},{88:[1,272]},o($VV1,[2,113]),o($VV1,$VW1,{84:273,28:$VX1}),{85:[2,111]},o($V92,[2,96],{75:$V$1,76:$V02,77:$V12,78:$V22,79:$V32,80:$V42}),o($V52,[2,97]),o($V92,[2,98],{75:$V$1,76:$V02,77:$V12,78:$V22,79:$V32,80:$V42}),o($V52,[2,99]),o($V92,[2,100],{75:$V$1,76:$V02,77:$V12,78:$V22,79:$V32,80:$V42}),o($V52,[2,101]),o($V92,[2,102],{75:$V$1,76:$V02,77:$V12,78:$V22,79:$V32,80:$V42}),o($V52,[2,103]),o($V92,[2,104],{75:$V$1,76:$V02,77:$V12,78:$V22,79:$V32,80:$V42}),o($V52,[2,105]),o($V52,[2,106]),o($V7,[2,87]),{104:274,106:$Va2,110:$Vb2,111:$Vc2},{104:278,106:$Va2,110:$Vb2,111:$Vc2},{103:[1,279]},o($Vs1,[2,13],{30:144,18:$Vt1,23:$Vu1,24:$Vv1,25:$Vw1,28:$Vx1,29:$Vy1,31:$Vz1,32:$VA1,33:$VB1,34:$VC1,35:$VD1,36:$VE1,37:$VF1,38:$VG1,39:$VH1,40:$VI1,41:$VJ1,42:$VK1,43:$VL1,44:$VM1,45:$VN1,46:$VO1,47:$VP1,48:$VQ1,49:$VR1,50:$VS1,51:$VT1,52:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,61:$V$,62:$V01,63:$V11,64:$V21,65:$V31}),o($Vs1,[2,128]),o($Vs1,[2,129]),{17:$Vd2,18:$Vl,23:$Vn,24:$Vo,39:$Vq,69:282,81:53,89:280,120:52},o($VV1,[2,114]),{68:[1,283]},{68:[2,137]},{68:[2,138]},{68:[2,139]},{68:[1,284]},{104:285,106:$Va2,110:$Vb2,111:$Vc2},{90:[1,286]},{18:$Vr,24:$Vu,25:$Vv,26:287,28:$Vw,29:$Vx,30:65,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,61:$V$,62:$V01,63:$V11,64:$V21,65:$V31},o($Ve2,[2,121],{33:$V71,46:$V81,47:$V91,48:$Va1,49:$Vb1}),{97:$Vf2,100:$Vg2,105:288,112:$Vh2,113:$Vi2,114:$Vj2,115:$Vk2,116:$Vl2,117:$Vm2,118:$Vn2,119:$Vo2},{97:$Vf2,100:$Vg2,105:299,112:$Vh2,113:$Vi2,114:$Vj2,115:$Vk2,116:$Vl2,117:$Vm2,118:$Vn2,119:$Vo2},{68:[1,300]},{17:$Vd2,18:$Vl,23:$Vn,24:$Vo,39:$Vq,69:282,81:53,89:301,120:52},o($Ve2,[2,120],{30:144,18:$Vt1,23:$Vu1,24:$Vv1,25:$Vw1,28:$Vx1,29:$Vy1,31:$Vz1,32:$VA1,33:$VB1,34:$VC1,35:$VD1,36:$VE1,37:$VF1,38:$VG1,39:$VH1,40:$VI1,41:$VJ1,42:$VK1,43:$VL1,44:$VM1,45:$VN1,46:$VO1,47:$VP1,48:$VQ1,49:$VR1,50:$VS1,51:$VT1,52:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,60:$V_,61:$V$,62:$V01,63:$V11,64:$V21,65:$V31}),{106:[1,302]},{106:[2,140]},{106:[2,141]},{106:[2,142]},{106:[2,143]},{106:[2,144]},{106:[2,145]},{106:[2,146]},{106:[2,147]},{106:[2,148]},{106:[2,149]},{106:[1,303]},{97:$Vf2,100:$Vg2,105:304,112:$Vh2,113:$Vi2,114:$Vj2,115:$Vk2,116:$Vl2,117:$Vm2,118:$Vn2,119:$Vo2},o($V6,[2,119]),{107:[1,305]},{17:$VY1,21:$VZ1,25:$V_1,102:306},{106:[1,307]},o($V0,$V1,{7:4,8:5,9:6,10:7,6:308,15:$V2,91:$V3,100:$V4}),{25:[2,134]},{17:$VY1,21:$VZ1,25:$V_1,102:309},{108:[1,310]},{25:[2,135]},{109:[1,311]},o($V6,[2,133])],
defaultActions: {11:[2,1],42:[2,108],117:[2,130],201:[2,131],225:[2,110],253:[2,111],275:[2,137],276:[2,138],277:[2,139],289:[2,140],290:[2,141],291:[2,142],292:[2,143],293:[2,144],294:[2,145],295:[2,146],296:[2,147],297:[2,148],298:[2,149],306:[2,134],309:[2,135]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { parse } = require ('../analizadorXPath/Xpath')
    const grammar = require('../analizadorXML/grammar')
    const { Simbolo } = require ('./AST/Simbolo')
    const { Entorno } = require ('./AST/Entorno')
    const { AST } = require ('./AST/AST')
    const { For } = require ('./Instrucciones/For')
    const { Let } = require ('./Instrucciones/Let')
    const { Where } = require ('./Instrucciones/Where')
    const { Return } = require ('./Instrucciones/Return')

    const { Tipo } = require('./AST/Tipo')
    const { Primitivo } = require ('./Expresiones/Primitivo')
    const { Operacion, Operador } = require ('./Expresiones/Operacion')

    //se crea el entorno global
    var Entorno_Global = new Entorno('global',null)
    //se crea el ast y se le pasa el entorno global
    var Arbol_AST = new AST([],Entorno_Global)

    var errores = [];

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip white space */
break;
case 1:return 56  
break;
case 2:return 58
break;
case 3:return 60
break;
case 4:return 64
break;
case 5:return 54
break;
case 6:return 57
break;
case 7:return 59
break;
case 8:return 63
break;
case 9:return 52
break;
case 10:return 55
break;
case 11:return 65
break;
case 12:return 61
break;
case 13:return 62
break;
case 14:return 35
break;
case 15:return 36
break;
case 16:return 41
break;
case 17:return 40
break;
case 18:return 15
break;
case 19:return 66
break;
case 20:return 70
break;
case 21:return 82
break;
case 22:return 85
break;
case 23:return 99
break;
case 24:return 19
break;
case 25:return 22
break;
case 26:return 79 // =
break;
case 27:return 80 // !=
break;
case 28:return 'it' // <
break;
case 29:return 76 // <=
break;
case 30:return 77 // >
break;
case 31:return 78 // >=
break;
case 32:return 21
break;
case 33:return 103
break;
case 34:return 87
break;
case 35:return 88
break;
case 36:return 90
break;
case 37:return 97
break;
case 38:return 112
break;
case 39:return 100
break;
case 40:return 113
break;
case 41:return 114
break;
case 42:return 115
break;
case 43:return 116
break;
case 44:return 117
break;
case 45:return 118
break;
case 46:return 119
break;
case 47:return 100
break;
case 48:return 101
break;
case 49:return 98
break;
case 50:return 94
break;
case 51:return 95
break;
case 52:return 96
break;
case 53:return 111
break;
case 54:return 110
break;
case 55:return  'quest'
break;
case 56:return 91
break;
case 57:return 73
break;
case 58:return 121
break;
case 59:return 50
break;
case 60:return 79
break;
case 61:return 51
break;
case 62:return 80
break;
case 63:return 45
break;
case 64:return 76
break;
case 65:return 43
break;
case 66:return 75
break;
case 67:return 44
break;
case 68:return 78
break;
case 69:return 42
break;
case 70:return 77
break;
case 71:return 46
break;
case 72:return 47
break;
case 73:return 33
break;
case 74:return 48 
break;
case 75:return 49
break;
case 76:return 37
break;
case 77:return 38
break;
case 78:return 107
break;
case 79:return 108
break;
case 80:return 23
break;
case 81:return 25
break;
case 82:return 53
break;
case 83:return 68
break;
case 84:return 32
break;
case 85:return 31
break;
case 86:return 109
break;
case 87:return 17
break;
case 88:return 34
break;
case 89:return 'or'
break;
case 90:return 29
break;
case 91:return 28
break;
case 92:return 24
break;
case 93:return 'CharLiteral'
break;
case 94:return 39;
break;
case 95:return 18;  
break;
case 96:return 'any'
break;
case 97:  
    console.error('Error léxico: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);
    errores.push({'Error Type': 'Lexico', 'Row': yy_.yylloc.first_line, 'Column': yy_.yylloc.first_column, 'Description': 'El caracter: '+yy_.yytext+' no pertenece al lenguaje' });

break;
case 98:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:child\b)/,/^(?:descendant-or-self\b)/,/^(?:following-sibling\b)/,/^(?:preceding-sibling\b)/,/^(?:ancestor-or-self\b)/,/^(?:descendant\b)/,/^(?:following\b)/,/^(?:preceding\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:self\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:text\b)/,/^(?:node\b)/,/^(?:position\b)/,/^(?:last\b)/,/^(?:for\b)/,/^(?:let\b)/,/^(?:where\b)/,/^(?:order by\b)/,/^(?:return\b)/,/^(?:to\b)/,/^(?:in\b)/,/^(?:doc\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:it\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:,)/,/^(?:as\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:string\b)/,/^(?:date\b)/,/^(?:decimal\b)/,/^(?:integer\b)/,/^(?:int\b)/,/^(?:long\b)/,/^(?:short\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:float\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:number\b)/,/^(?:substring\b)/,/^(?:upper-case\b)/,/^(?:lower-case\b)/,/^(?:fn\b)/,/^(?:xs\b)/,/^(?:\?)/,/^(?:local\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:=)/,/^(?:eq\b)/,/^(?:!=)/,/^(?:ne\b)/,/^(?:<=)/,/^(?:le\b)/,/^(?:<)/,/^(?:lt\b)/,/^(?:>=)/,/^(?:ge\b)/,/^(?:>)/,/^(?:gt\b)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:div\b)/,/^(?:mod\b)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:::)/,/^(?::)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:;)/,/^(?:\$)/,/^(?:@)/,/^(?:\|)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*"))/,/^(?:{charliteral})/,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+))|[0-9]+)/,/^(?:[a-zA-ZÀ-ÿ][a-zA-ZÀ-ÿ0-9_ñÑ]*)/,/^(?:(.))/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gram_xquery;
exports.Parser = gram_xquery.Parser;
exports.parse = function () { return gram_xquery.parse.apply(gram_xquery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}