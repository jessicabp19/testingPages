/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var test = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,6],$V3=[1,10],$V4=[1,12],$V5=[1,21],$V6=[1,22],$V7=[1,17],$V8=[1,18],$V9=[1,15],$Va=[1,16],$Vb=[1,14],$Vc=[1,20],$Vd=[1,19],$Ve=[1,24],$Vf=[1,25],$Vg=[1,26],$Vh=[5,7,9,11,20,22,24,25,27,31,32,33,35,37,40,41,45,46,47],$Vi=[1,46],$Vj=[14,27,31,32,33,35],$Vk=[1,54],$Vl=[1,53],$Vm=[1,51],$Vn=[1,52],$Vo=[1,50],$Vp=[1,55],$Vq=[1,58],$Vr=[1,59],$Vs=[10,14,30,51,52,53,54,55,56,57,58,59,60,61];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"etiqueta":7,":":8,"goto":9,";":10,"if":11,"(":12,"condition":13,")":14,"idsf":15,"=":16,"exp":17,"asignacionStruct":18,"prints":19,"id":20,"voids":21,"return":22,"headers":23,"hc1":24,"hc2":25,"types":26,"Heap":27,"[":28,"number":29,"]":30,"Stack":31,"SP":32,"HP":33,"tempos":34,"temporal":35,",":36,"void":37,"main":38,"{":39,"}":40,"printf":41,"\"":42,"params":43,"ids":44,"int":45,"char":46,"double":47,"%c":48,"%d":49,"%f":50,"+":51,"-":52,"*":53,"/":54,"%":55,"<":56,">":57,"<=":58,">=":59,"==":60,"!=":61,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"etiqueta",8:":",9:"goto",10:";",11:"if",12:"(",14:")",16:"=",20:"id",22:"return",24:"hc1",25:"hc2",27:"Heap",28:"[",29:"number",30:"]",31:"Stack",32:"SP",33:"HP",35:"temporal",36:",",37:"void",38:"main",39:"{",40:"}",41:"printf",42:"\"",45:"int",46:"char",47:"double",48:"%c",49:"%d",50:"%f",51:"+",52:"-",53:"*",54:"/",55:"%",56:"<",57:">",58:"<=",59:">=",60:"==",61:"!="},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,3],[6,7],[6,4],[6,1],[6,1],[6,4],[6,1],[6,2],[6,4],[6,1],[23,1],[23,1],[23,6],[23,6],[23,3],[23,3],[23,3],[23,1],[34,3],[34,1],[21,7],[21,7],[19,12],[26,1],[26,1],[26,1],[43,1],[43,1],[43,1],[18,7],[18,7],[18,10],[18,10],[17,3],[17,3],[17,3],[17,3],[17,3],[17,4],[17,4],[17,7],[17,7],[17,1],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[44,1],[44,1],[44,1],[44,1],[44,1],[44,2],[15,1],[15,1],[15,1],[15,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// retorno la lista de tokens
    console.log('-->');
    console.log(instrucciones)
    return instrucciones;
	
break;
case 2: case 3:
 
break;
case 4:
 /*etiqueta pal salto*/ 
                                  this.$ = $$[$0-1] +$$[$0];
                                  instrucciones.push(new Instruccion('etiqueta', this.$, '', '', '', ''));
                                
break;
case 5:
 /*salto*/
                                  this.$ = $$[$0-2] +$$[$0-1] + $$[$0];
                                  instrucciones.push(new Instruccion('salto', this.$, '', '', '', ''));
                                
break;
case 6:
 /*if*/ /*  TODO TODO TODO TODO TODO TODO TODO  */
                                                this.$ = $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]
                                                instrucciones.push(new Instruccion('salto_condicional', this.$, '', '', '', ''));
                                              
break;
case 7:
 /*asignación*/
break;
case 8:
 /*asignación a estructuras*/
break;
case 9:
/* Prints */
break;
case 10:
/* llamada a métodos */
                              this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
                              instrucciones.push(new Instruccion('llamada_metodo', this.$, '', '', '', ''));                                
                            
break;
case 11:
/*  finalización de un método */
break;
case 12:
/* return  */
                              instrucciones.push(new Instruccion('return', 'return;', '', '', '', ''));                                
                            
break;
case 13:
/* return  */
                              instrucciones.push(new Instruccion('return', 'return();', '', '', '', ''));                                
                            
break;
case 38: case 39: case 40: case 41: case 42: case 48: case 49: case 50: case 51: case 52: case 53:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0] 
break;
case 43: case 44:
 this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0] 
break;
case 45: case 46:
 this.$ = $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0] 
break;
case 47: case 54: case 55: case 56: case 57: case 58: case 60: case 61: case 62: case 63:
 this.$ = $$[$0] 
break;
case 59:
 this.$ = $$[$0-1] + $$[$0] 
break;
}
},
table: [{3:1,4:2,6:3,7:$V0,9:$V1,11:$V2,15:7,18:8,19:9,20:$V3,21:11,22:$V4,23:13,24:$V5,25:$V6,26:23,27:$V7,31:$V8,32:$V9,33:$Va,35:$Vb,37:$Vc,41:$Vd,45:$Ve,46:$Vf,47:$Vg},{1:[3]},{5:[1,27],6:28,7:$V0,9:$V1,11:$V2,15:7,18:8,19:9,20:$V3,21:11,22:$V4,23:13,24:$V5,25:$V6,26:23,27:$V7,31:$V8,32:$V9,33:$Va,35:$Vb,37:$Vc,41:$Vd,45:$Ve,46:$Vf,47:$Vg},o($Vh,[2,3]),{8:[1,29]},{7:[1,30]},{12:[1,31]},{16:[1,32]},o($Vh,[2,8]),o($Vh,[2,9]),{12:[1,33],16:[2,63]},o($Vh,[2,11]),{10:[1,34],12:[1,35]},o($Vh,[2,14]),{16:[2,60]},{16:[2,61]},{16:[2,62]},{28:[1,36]},{28:[1,37]},{12:[1,38]},{20:[1,40],38:[1,39]},o($Vh,[2,15]),o($Vh,[2,16]),{27:[1,41],31:[1,42],32:[1,43],33:[1,44],34:45,35:$Vi},o($Vj,[2,28]),o($Vj,[2,29]),o($Vj,[2,30]),{1:[2,1]},o($Vh,[2,2]),o($Vh,[2,4]),{10:[1,47]},{13:48,20:$Vk,29:$Vl,32:$Vm,33:$Vn,35:$Vo,44:49,52:$Vp},{17:56,20:$Vk,27:$Vq,29:$Vl,31:$Vr,32:$Vm,33:$Vn,35:$Vo,44:57,52:$Vp},{14:[1,60]},o($Vh,[2,12]),{14:[1,61]},{12:[1,63],20:$Vk,29:$Vl,32:$Vm,33:$Vn,35:$Vo,44:62,52:$Vp},{12:[1,65],20:$Vk,29:$Vl,32:$Vm,33:$Vn,35:$Vo,44:64,52:$Vp},{42:[1,66]},{12:[1,67]},{12:[1,68]},{28:[1,69]},{28:[1,70]},{10:[1,71]},{10:[1,72]},{10:[1,73]},{10:[2,24],36:[1,74]},o($Vh,[2,5]),{14:[1,75]},{56:[1,76],57:[1,77],58:[1,78],59:[1,79],60:[1,80],61:[1,81]},o($Vs,[2,54]),o($Vs,[2,55]),o($Vs,[2,56]),o($Vs,[2,57]),o($Vs,[2,58]),{20:$Vk,29:$Vl,32:$Vm,33:$Vn,35:$Vo,44:82,52:$Vp},{10:[1,83]},{10:[2,47],51:[1,84],52:[1,85],53:[1,86],54:[1,87],55:[1,88]},{28:[1,89]},{28:[1,90]},{10:[1,91]},{10:[1,92]},{30:[1,93]},{26:94,45:$Ve,46:$Vf,47:$Vg},{30:[1,95]},{26:96,45:$Ve,46:$Vf,47:$Vg},{43:97,48:[1,98],49:[1,99],50:[1,100]},{14:[1,101]},{14:[1,102]},{29:[1,103]},{29:[1,104]},o($Vh,[2,19]),o($Vh,[2,20]),o($Vh,[2,21]),{34:105,35:$Vi},{9:[1,106]},{20:$Vk,29:$Vl,32:$Vm,33:$Vn,35:$Vo,44:107,52:$Vp},{20:$Vk,29:$Vl,32:$Vm,33:$Vn,35:$Vo,44:108,52:$Vp},{20:$Vk,29:$Vl,32:$Vm,33:$Vn,35:$Vo,44:109,52:$Vp},{20:$Vk,29:$Vl,32:$Vm,33:$Vn,35:$Vo,44:110,52:$Vp},{20:$Vk,29:$Vl,32:$Vm,33:$Vn,35:$Vo,44:111,52:$Vp},{20:$Vk,29:$Vl,32:$Vm,33:$Vn,35:$Vo,44:112,52:$Vp},o($Vs,[2,59]),o($Vh,[2,7]),{20:$Vk,29:$Vl,32:$Vm,33:$Vn,35:$Vo,44:113,52:$Vp},{20:$Vk,29:$Vl,32:$Vm,33:$Vn,35:$Vo,44:114,52:$Vp},{20:$Vk,29:$Vl,32:$Vm,33:$Vn,35:$Vo,44:115,52:$Vp},{20:$Vk,29:$Vl,32:$Vm,33:$Vn,35:$Vo,44:116,52:$Vp},{20:$Vk,29:$Vl,32:$Vm,33:$Vn,35:$Vo,44:117,52:$Vp},{12:[1,119],20:$Vk,29:$Vl,32:$Vm,33:$Vn,35:$Vo,44:118,52:$Vp},{12:[1,121],20:$Vk,29:$Vl,32:$Vm,33:$Vn,35:$Vo,44:120,52:$Vp},o($Vh,[2,10]),o($Vh,[2,13]),{16:[1,122]},{14:[1,123]},{16:[1,124]},{14:[1,125]},{42:[1,126]},{42:[2,31]},{42:[2,32]},{42:[2,33]},{39:[1,127]},{39:[1,128]},{30:[1,129]},{30:[1,130]},{10:[2,23]},{7:[1,131]},{14:[2,48]},{14:[2,49]},{14:[2,50]},{14:[2,51]},{14:[2,52]},{14:[2,53]},{10:[2,38]},{10:[2,39]},{10:[2,40]},{10:[2,41]},{10:[2,42]},{30:[1,132]},{26:133,45:$Ve,46:$Vf,47:$Vg},{30:[1,134]},{26:135,45:$Ve,46:$Vf,47:$Vg},{17:136,20:$Vk,27:$Vq,29:$Vl,31:$Vr,32:$Vm,33:$Vn,35:$Vo,44:57,52:$Vp},{20:$Vk,29:$Vl,32:$Vm,33:$Vn,35:$Vo,44:137,52:$Vp},{17:138,20:$Vk,27:$Vq,29:$Vl,31:$Vr,32:$Vm,33:$Vn,35:$Vo,44:57,52:$Vp},{20:$Vk,29:$Vl,32:$Vm,33:$Vn,35:$Vo,44:139,52:$Vp},{36:[1,140]},{4:141,6:3,7:$V0,9:$V1,11:$V2,15:7,18:8,19:9,20:$V3,21:11,22:$V4,23:13,24:$V5,25:$V6,26:23,27:$V7,31:$V8,32:$V9,33:$Va,35:$Vb,37:$Vc,41:$Vd,45:$Ve,46:$Vf,47:$Vg},{4:142,6:3,7:$V0,9:$V1,11:$V2,15:7,18:8,19:9,20:$V3,21:11,22:$V4,23:13,24:$V5,25:$V6,26:23,27:$V7,31:$V8,32:$V9,33:$Va,35:$Vb,37:$Vc,41:$Vd,45:$Ve,46:$Vf,47:$Vg},{10:[1,143]},{10:[1,144]},{10:[1,145]},{10:[2,43]},{14:[1,146]},{10:[2,44]},{14:[1,147]},{10:[1,148]},{30:[1,149]},{10:[1,150]},{30:[1,151]},{12:[1,152]},{6:28,7:$V0,9:$V1,11:$V2,15:7,18:8,19:9,20:$V3,21:11,22:$V4,23:13,24:$V5,25:$V6,26:23,27:$V7,31:$V8,32:$V9,33:$Va,35:$Vb,37:$Vc,40:[1,153],41:$Vd,45:$Ve,46:$Vf,47:$Vg},{6:28,7:$V0,9:$V1,11:$V2,15:7,18:8,19:9,20:$V3,21:11,22:$V4,23:13,24:$V5,25:$V6,26:23,27:$V7,31:$V8,32:$V9,33:$Va,35:$Vb,37:$Vc,40:[1,154],41:$Vd,45:$Ve,46:$Vf,47:$Vg},o($Vh,[2,17]),o($Vh,[2,18]),o($Vh,[2,6]),{20:$Vk,29:$Vl,32:$Vm,33:$Vn,35:$Vo,44:155,52:$Vp},{20:$Vk,29:$Vl,32:$Vm,33:$Vn,35:$Vo,44:156,52:$Vp},o($Vh,[2,34]),{16:[1,157]},o($Vh,[2,35]),{16:[1,158]},{26:159,45:$Ve,46:$Vf,47:$Vg},o($Vh,[2,25]),o($Vh,[2,26]),{30:[1,160]},{30:[1,161]},{17:162,20:$Vk,27:$Vq,29:$Vl,31:$Vr,32:$Vm,33:$Vn,35:$Vo,44:57,52:$Vp},{17:163,20:$Vk,27:$Vq,29:$Vl,31:$Vr,32:$Vm,33:$Vn,35:$Vo,44:57,52:$Vp},{14:[1,164]},{10:[2,46]},{10:[2,45]},{10:[1,165]},{10:[1,166]},{20:$Vk,29:$Vl,32:$Vm,33:$Vn,35:$Vo,44:167,52:$Vp},o($Vh,[2,36]),o($Vh,[2,37]),{14:[1,168]},{10:[1,169]},o($Vh,[2,27])],
defaultActions: {14:[2,60],15:[2,61],16:[2,62],27:[2,1],98:[2,31],99:[2,32],100:[2,33],105:[2,23],107:[2,48],108:[2,49],109:[2,50],110:[2,51],111:[2,52],112:[2,53],113:[2,38],114:[2,39],115:[2,40],116:[2,41],117:[2,42],132:[2,43],134:[2,44],160:[2,46],161:[2,45]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

     /*Acá importo mis cosas errores, tokens para la tabla de símbolos y eso*/
     const { Instruccion } = require('./codigo/instruccion')
     //const { Optimizador } = require('src/code/optimizador/codigo/optimizador')

     var instrucciones = [];
     var pilaexp =  [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip */
break;
case 2:/* skip */
break;
case 3:/* skip */
break;
case 4:return 28;
break;
case 5:return 30;
break;
case 6:return 12;
break;
case 7:return 14;
break;
case 8:return 39;
break;
case 9:return 40;
break;
case 10:return 'print';
break;
case 11:return 41;
break;
case 12:return 48;
break;
case 13:return 49;
break;
case 14:return 50;
break;
case 15:return 24;
break;
case 16:return 25;
break;
case 17:return 58;
break;
case 18:return 56;
break;
case 19:return 59;
break;
case 20:return 57;
break;
case 21:return 60;
break;
case 22:return 61;
break;
case 23:return 51;
break;
case 24:return 52;
break;
case 25:return 53;
break;
case 26:return 54;
break;
case 27:return 55;
break;
case 28:return 16;
break;
case 29:return 9;
break;
case 30:return 11;
break;
case 31:return 22;
break;
case 32:return 27;
break;
case 33:return 31;
break;
case 34:return 32;
break;
case 35:return 33;
break;
case 36:return 32;
break;
case 37:return 33;
break;
case 38:return 37;
break;
case 39:return 38;
break;
case 40:return 45;
break;
case 41:return 46;
break;
case 42:return 47;
break;
case 43:return 35;
break;
case 44:return 7;
break;
case 45:return 20;
break;
case 46:return 29;
break;
case 47:return 10;
break;
case 48:return 8;
break;
case 49:return 42;
break;
case 50:return '\'';
break;
case 51:return 36;
break;
case 52:return 5
break;
case 53:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[ \r\t]+)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:print\b)/i,/^(?:printf\b)/i,/^(?:%c\b)/i,/^(?:%d\b)/i,/^(?:%f\b)/i,/^(?:#include <stdio\.h>)/i,/^(?:#include <math\.h>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:=)/i,/^(?:goto\b)/i,/^(?:if\b)/i,/^(?:return\b)/i,/^(?:Heap\b)/i,/^(?:Stack\b)/i,/^(?:SP\b)/i,/^(?:HP\b)/i,/^(?:P\b)/i,/^(?:H\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:int\b)/i,/^(?:char\b)/i,/^(?:double\b)/i,/^(?:(T|t)[0-9]+)/i,/^(?:(L|l)[0-9]+)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*\b)/i,/^(?:([0-9]+(\.[0-9]+)?\b))/i,/^(?:;)/i,/^(?::)/i,/^(?:")/i,/^(?:')/i,/^(?:,)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = test;
exports.Parser = test.Parser;
exports.parse = function () { return test.parse.apply(test, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}